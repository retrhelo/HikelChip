// A set of all instructions supported. 
// Compressed ones are not included. 

package hikel.decode

import chisel3._
import chisel3.util.BitPat

object Instructions {
	/* Standard RV32I/RV64I Base Instructions */

	def LUI 	= BitPat("b????????????????????_?????_0110111")
	def AUIPC 	= BitPat("b????????????????????_?????_0010111")
	// jump 
	def JAL 	= BitPat("b????????????????????_?????_1101111")
	def JALR 	= BitPat("b????????????_?????_000_?????_1100111")
	// branch 
	def BRANCH 	= BitPat("b???????_?????_?????_???_?????_1100011")
	// load 
	def LOAD 	= BitPat("b????????????_?????_???_?????_0000011")
	// store 
	def STORE 	= BitPat("b???????_?????_?????_???_?????_0100011")
	// immediate arithmetic 
	def ARITH_I	= BitPat("b????????????_?????_???_?????_001?011")
	// register arithmetic 
	def ARITH 	= BitPat("b???????_?????_?????_???_?????_011?011")
	// fence 
	def FENCE 	= BitPat("b????????????_?????_000_?????_0001111")
	// ecall 
	def ECALL 	= BitPat("b000000000000_00000_000_00000_1110011")
	// ebreak 
	def EBREAK 	= BitPat("b000000000001_00000_000_00000_1110011")

	/* Zicsr Standard Extension */

	def CSRRW 	= BitPat("b????????????_?????_001_?????_1110011")
	def CSRRS 	= BitPat("b????????????_?????_010_?????_1110011")
	def CSRRC 	= BitPat("b????????????_?????_011_?????_1110011")
	def CSRRWI 	= BitPat("b????????????_?????_101_?????_1110011")
	def CSRRSI 	= BitPat("b????????????_?????_110_?????_1110011")
	def CSRRCI 	= BitPat("b????????????_?????_111_?????_1110011")
}